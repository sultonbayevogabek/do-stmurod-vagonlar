{"ast":null,"code":"import { HttpEventType, HttpResponse } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { decode, encode } from 'msgpack-lite';\n//\n// @Injectable({\n// \tprovidedIn: 'root',\n// })\n//\n// export class HttpConfigInterceptor implements HttpInterceptor {\n//   intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n//\n// \t\tlet requestClone = request.clone({\n// \t\t\tbody: encode(request.body).buffer,\n// \t\t\tresponseType: 'arraybuffer' as 'json'\n// \t\t});\n//\n// \t\treturn next.handle(requestClone).pipe(\n// \t\t\tmap((event: HttpEvent<any>): any => {\n// \t\t\t\tif (event instanceof HttpResponse && event.status !== 500) {\n// \t\t\t\t\tconst body = decode(new Uint8Array(event.body));\n// \t\t\t\t\treturn event.clone({\n// \t\t\t\t\t\tbody: body,\n// \t\t\t\t\t});\n// \t\t\t\t}\n// \t\t\t\tif (event.type !== HttpEventType.Response) {\n// \t\t\t\t\treturn event;\n// \t\t\t\t}\n// \t\t\t}),\n// \t\t);\n// \t}\n// }\nexport function httpConfigInterceptor(req, next) {\n  if (req.method !== 'POST') {\n    return next(req);\n  }\n  if (req.url.includes('assets/i18n')) {\n    return next(req);\n  }\n  let requestClone = req.clone({\n    body: encode(req.body).buffer,\n    responseType: 'arraybuffer'\n  });\n  return next(requestClone).pipe(map(event => {\n    if (event instanceof HttpResponse && event.status !== 500) {\n      const body = decode(new Uint8Array(event.body));\n      return event.clone({\n        body: body\n      });\n    }\n    if (event.type !== HttpEventType.Response) {\n      return event;\n    }\n  }));\n}","map":{"version":3,"names":["HttpEventType","HttpResponse","map","decode","encode","httpConfigInterceptor","req","next","method","url","includes","requestClone","clone","body","buffer","responseType","pipe","event","status","Uint8Array","type","Response"],"sources":["/Users/sultonbayevogabek/Projects/do-stmurod-vagonlar/src/app/core/interceptors/http-config.interceptor.ts"],"sourcesContent":["import {\n  HttpEvent,\n  HttpEventType, HttpHandler,\n  HttpHandlerFn,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { decode, encode } from 'msgpack-lite';\nimport { Injectable } from '@angular/core';\n//\n// @Injectable({\n// \tprovidedIn: 'root',\n// })\n//\n// export class HttpConfigInterceptor implements HttpInterceptor {\n//   intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n//\n// \t\tlet requestClone = request.clone({\n// \t\t\tbody: encode(request.body).buffer,\n// \t\t\tresponseType: 'arraybuffer' as 'json'\n// \t\t});\n//\n// \t\treturn next.handle(requestClone).pipe(\n// \t\t\tmap((event: HttpEvent<any>): any => {\n// \t\t\t\tif (event instanceof HttpResponse && event.status !== 500) {\n// \t\t\t\t\tconst body = decode(new Uint8Array(event.body));\n// \t\t\t\t\treturn event.clone({\n// \t\t\t\t\t\tbody: body,\n// \t\t\t\t\t});\n// \t\t\t\t}\n// \t\t\t\tif (event.type !== HttpEventType.Response) {\n// \t\t\t\t\treturn event;\n// \t\t\t\t}\n// \t\t\t}),\n// \t\t);\n// \t}\n// }\n\nexport function httpConfigInterceptor(req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  if (req.method !== 'POST') {\n    return next(req);\n  }\n\n  if (req.url.includes('assets/i18n')) {\n    return next(req);\n  }\n\n  let requestClone = req.clone({\n    body: encode(req.body).buffer,\n    responseType: 'arraybuffer' as 'json'\n  });\n\n  return next(requestClone).pipe(\n    map((event: HttpEvent<any>): any => {\n      if (event instanceof HttpResponse && event.status !== 500) {\n        const body = decode(new Uint8Array(event.body));\n        return event.clone({\n          body: body,\n        });\n      }\n\n      if (event.type !== HttpEventType.Response) {\n        return event;\n      }\n    }),\n  );\n}\n"],"mappings":"AAAA,SAEEA,aAAa,EAIbC,YAAY,QACP,sBAAsB;AAE7B,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,MAAM,EAAEC,MAAM,QAAQ,cAAc;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAM,SAAUC,qBAAqBA,CAACC,GAAyB,EAAEC,IAAmB;EAClF,IAAID,GAAG,CAACE,MAAM,KAAK,MAAM,EAAE;IACzB,OAAOD,IAAI,CAACD,GAAG,CAAC;EAClB;EAEA,IAAIA,GAAG,CAACG,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;IACnC,OAAOH,IAAI,CAACD,GAAG,CAAC;EAClB;EAEA,IAAIK,YAAY,GAAGL,GAAG,CAACM,KAAK,CAAC;IAC3BC,IAAI,EAAET,MAAM,CAACE,GAAG,CAACO,IAAI,CAAC,CAACC,MAAM;IAC7BC,YAAY,EAAE;GACf,CAAC;EAEF,OAAOR,IAAI,CAACI,YAAY,CAAC,CAACK,IAAI,CAC5Bd,GAAG,CAAEe,KAAqB,IAAS;IACjC,IAAIA,KAAK,YAAYhB,YAAY,IAAIgB,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;MACzD,MAAML,IAAI,GAAGV,MAAM,CAAC,IAAIgB,UAAU,CAACF,KAAK,CAACJ,IAAI,CAAC,CAAC;MAC/C,OAAOI,KAAK,CAACL,KAAK,CAAC;QACjBC,IAAI,EAAEA;OACP,CAAC;IACJ;IAEA,IAAII,KAAK,CAACG,IAAI,KAAKpB,aAAa,CAACqB,QAAQ,EAAE;MACzC,OAAOJ,KAAK;IACd;EACF,CAAC,CAAC,CACH;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}