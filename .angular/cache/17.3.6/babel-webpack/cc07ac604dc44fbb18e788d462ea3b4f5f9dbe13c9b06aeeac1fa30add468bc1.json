{"ast":null,"code":"import { AuthService } from '../services/auth.service';\nimport { inject } from '@angular/core';\nexport function authInterceptor(req, next) {\n  const authService = inject(AuthService);\n  let requestWithToken = req.clone();\n  if (authService.token) {\n    requestWithToken = requestWithToken.clone({\n      headers: req.headers.append('Authorization', 'Bearer ' + authService.token)\n    });\n  }\n  return next(requestWithToken);\n}","map":{"version":3,"names":["AuthService","inject","authInterceptor","req","next","authService","requestWithToken","clone","token","headers","append"],"sources":["/Users/sultonbayevogabek/Projects/do-stmurod-vagonlar/src/app/core/interceptors/auth.interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandlerFn, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { inject } from '@angular/core';\n\nexport function authInterceptor(req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  const authService = inject(AuthService);\n\n  let requestWithToken = req.clone();\n\n  if (authService.token) {\n    requestWithToken = requestWithToken.clone({\n      headers: req.headers.append('Authorization', 'Bearer ' + authService.token)\n    })\n  }\n\n  return next(requestWithToken);\n}\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,0BAA0B;AACtD,SAASC,MAAM,QAAQ,eAAe;AAEtC,OAAM,SAAUC,eAAeA,CAACC,GAAyB,EAAEC,IAAmB;EAC5E,MAAMC,WAAW,GAAGJ,MAAM,CAACD,WAAW,CAAC;EAEvC,IAAIM,gBAAgB,GAAGH,GAAG,CAACI,KAAK,EAAE;EAElC,IAAIF,WAAW,CAACG,KAAK,EAAE;IACrBF,gBAAgB,GAAGA,gBAAgB,CAACC,KAAK,CAAC;MACxCE,OAAO,EAAEN,GAAG,CAACM,OAAO,CAACC,MAAM,CAAC,eAAe,EAAE,SAAS,GAAGL,WAAW,CAACG,KAAK;KAC3E,CAAC;EACJ;EAEA,OAAOJ,IAAI,CAACE,gBAAgB,CAAC;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}