{"ast":null,"code":"import { importProvidersFrom } from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { routes } from './app.routes';\nimport { provideAnimationsAsync } from '@angular/platform-browser/animations/async';\nimport { provideIcons } from './config/icons/icons.provider';\nimport { HttpClient, HttpClientModule, provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { authInterceptor } from './core/interceptors/auth.interceptor';\nimport { loggingInterceptor } from './core/interceptors/logging.interceptor';\nimport { languageInterceptor } from './core/interceptors/language.interceptor';\nimport { errorInterceptor } from './core/interceptors/error.interceptor';\nimport localeRu from '@angular/common/locales/ru';\nimport { registerLocaleData } from '@angular/common';\nimport { httpConfigInterceptor } from './core/interceptors/http-config.interceptor';\nregisterLocaleData(localeRu);\nfunction HttpLoaderFactory(http) {\n  return new TranslateHttpLoader(http);\n}\nconst I18N_CONFIG = {\n  defaultLanguage: localStorage.getItem('lang') ? localStorage.getItem('lang') : 'uz_latn',\n  loader: {\n    provide: TranslateLoader,\n    useFactory: HttpLoaderFactory,\n    deps: [HttpClient]\n  }\n};\nexport const appConfig = {\n  providers: [provideIcons(), provideRouter(routes), provideAnimationsAsync(), provideHttpClient(withInterceptors([authInterceptor, loggingInterceptor, languageInterceptor, errorInterceptor, httpConfigInterceptor])), importProvidersFrom(HttpClientModule, TranslateModule.forRoot(I18N_CONFIG))]\n};","map":{"version":3,"names":["importProvidersFrom","provideRouter","routes","provideAnimationsAsync","provideIcons","HttpClient","HttpClientModule","provideHttpClient","withInterceptors","TranslateHttpLoader","TranslateLoader","TranslateModule","authInterceptor","loggingInterceptor","languageInterceptor","errorInterceptor","localeRu","registerLocaleData","httpConfigInterceptor","HttpLoaderFactory","http","I18N_CONFIG","defaultLanguage","localStorage","getItem","loader","provide","useFactory","deps","appConfig","providers","forRoot"],"sources":["/Users/sultonbayevogabek/Projects/do-stmurod-vagonlar/src/app/app.config.ts"],"sourcesContent":["import { ApplicationConfig, importProvidersFrom } from '@angular/core';\nimport { provideRouter } from '@angular/router';\n\nimport { routes } from './app.routes';\nimport { provideAnimationsAsync } from '@angular/platform-browser/animations/async';\nimport { provideIcons } from './config/icons/icons.provider';\nimport { HttpClient, HttpClientModule, provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { authInterceptor } from './core/interceptors/auth.interceptor';\nimport { loggingInterceptor } from './core/interceptors/logging.interceptor';\nimport { languageInterceptor } from './core/interceptors/language.interceptor';\nimport { errorInterceptor } from './core/interceptors/error.interceptor';\nimport localeRu from '@angular/common/locales/ru';\nimport { registerLocaleData } from '@angular/common';\nimport { httpConfigInterceptor } from './core/interceptors/http-config.interceptor';\n\nregisterLocaleData(localeRu);\n\nfunction HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http);\n}\n\nconst I18N_CONFIG = {\n  defaultLanguage: localStorage.getItem('lang') ? localStorage.getItem('lang'): 'uz_latn',\n  loader: {\n    provide: TranslateLoader,\n    useFactory: HttpLoaderFactory,\n    deps: [ HttpClient ]\n  }\n};\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideIcons(),\n    provideRouter(routes),\n    provideAnimationsAsync(),\n    provideHttpClient(\n      withInterceptors([\n        authInterceptor,\n        loggingInterceptor,\n        languageInterceptor,\n        errorInterceptor,\n        httpConfigInterceptor,\n      ])\n    ),\n    importProvidersFrom(\n      HttpClientModule,\n      TranslateModule.forRoot(I18N_CONFIG)\n    ),\n  ]\n};\n"],"mappings":"AAAA,SAA4BA,mBAAmB,QAAQ,eAAe;AACtE,SAASC,aAAa,QAAQ,iBAAiB;AAE/C,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,sBAAsB,QAAQ,4CAA4C;AACnF,SAASC,YAAY,QAAQ,+BAA+B;AAC5D,SAASC,UAAU,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEC,gBAAgB,QAAQ,sBAAsB;AACxG,SAASC,mBAAmB,QAAQ,4BAA4B;AAChE,SAASC,eAAe,EAAEC,eAAe,QAAQ,qBAAqB;AACtE,SAASC,eAAe,QAAQ,sCAAsC;AACtE,SAASC,kBAAkB,QAAQ,yCAAyC;AAC5E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,gBAAgB,QAAQ,uCAAuC;AACxE,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD,SAASC,qBAAqB,QAAQ,6CAA6C;AAEnFD,kBAAkB,CAACD,QAAQ,CAAC;AAE5B,SAASG,iBAAiBA,CAACC,IAAgB;EACzC,OAAO,IAAIX,mBAAmB,CAACW,IAAI,CAAC;AACtC;AAEA,MAAMC,WAAW,GAAG;EAClBC,eAAe,EAAEC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,GAAGD,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,GAAE,SAAS;EACvFC,MAAM,EAAE;IACNC,OAAO,EAAEhB,eAAe;IACxBiB,UAAU,EAAER,iBAAiB;IAC7BS,IAAI,EAAE,CAAEvB,UAAU;;CAErB;AAED,OAAO,MAAMwB,SAAS,GAAsB;EAC1CC,SAAS,EAAE,CACT1B,YAAY,EAAE,EACdH,aAAa,CAACC,MAAM,CAAC,EACrBC,sBAAsB,EAAE,EACxBI,iBAAiB,CACfC,gBAAgB,CAAC,CACfI,eAAe,EACfC,kBAAkB,EAClBC,mBAAmB,EACnBC,gBAAgB,EAChBG,qBAAqB,CACtB,CAAC,CACH,EACDlB,mBAAmB,CACjBM,gBAAgB,EAChBK,eAAe,CAACoB,OAAO,CAACV,WAAW,CAAC,CACrC;CAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}